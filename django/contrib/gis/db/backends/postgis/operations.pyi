# Stubs for django.contrib.gis.db.backends.postgis.operations (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from django.contrib.gis.db.backends.base.operations import BaseSpatialOperations
from django.contrib.gis.db.backends.utils import SpatialOperator
from django.db.backends.postgresql.operations import DatabaseOperations
from .models import PostGISGeometryColumns as PostGISGeometryColumns, PostGISSpatialRefSys as PostGISSpatialRefSys
from .pgraster import get_pgraster_srid as get_pgraster_srid

class PostGISOperator(SpatialOperator):
    geography = ...  # type: Any
    def __init__(self, geography: bool = ..., **kwargs) -> None: ...
    def as_sql(self, connection, lookup, *args): ...

class PostGISDistanceOperator(PostGISOperator):
    sql_template = ...  # type: str
    def as_sql(self, connection, lookup, template_params, sql_params): ...

class PostGISOperations(BaseSpatialOperations, DatabaseOperations):
    name = ...  # type: str
    postgis = ...  # type: bool
    geography = ...  # type: bool
    geom_func_prefix = ...  # type: str
    version_regex = ...  # type: Any
    Adapter = ...  # type: Any
    Adaptor = ...  # type: Any
    gis_operators = ...  # type: Any
    unsupported_functions = ...  # type: Any
    function_names = ...  # type: Any
    area = ...  # type: Any
    bounding_circle = ...  # type: Any
    centroid = ...  # type: Any
    collect = ...  # type: Any
    difference = ...  # type: Any
    distance = ...  # type: Any
    distance_sphere = ...  # type: Any
    distance_spheroid = ...  # type: Any
    envelope = ...  # type: Any
    extent = ...  # type: Any
    extent3d = ...  # type: Any
    force_rhr = ...  # type: Any
    geohash = ...  # type: Any
    geojson = ...  # type: Any
    gml = ...  # type: Any
    intersection = ...  # type: Any
    kml = ...  # type: Any
    length = ...  # type: Any
    length3d = ...  # type: Any
    length_spheroid = ...  # type: Any
    makeline = ...  # type: Any
    mem_size = ...  # type: Any
    num_geom = ...  # type: Any
    num_points = ...  # type: Any
    perimeter = ...  # type: Any
    perimeter3d = ...  # type: Any
    point_on_surface = ...  # type: Any
    polygonize = ...  # type: Any
    reverse = ...  # type: Any
    scale = ...  # type: Any
    snap_to_grid = ...  # type: Any
    svg = ...  # type: Any
    sym_difference = ...  # type: Any
    transform = ...  # type: Any
    translate = ...  # type: Any
    union = ...  # type: Any
    unionagg = ...  # type: Any
    def __init__(self, connection) -> None: ...
    def spatial_version(self): ...
    def convert_extent(self, box, srid): ...
    def convert_extent3d(self, box3d, srid): ...
    def convert_geom(self, hex, geo_field): ...
    def geo_db_type(self, f): ...
    def get_distance(self, f, dist_val, lookup_type): ...
    def get_geom_placeholder(self, f, value, compiler): ...
    def postgis_geos_version(self): ...
    def postgis_lib_version(self): ...
    def postgis_proj_version(self): ...
    def postgis_version(self): ...
    def postgis_full_version(self): ...
    def postgis_version_tuple(self): ...
    def proj_version_tuple(self): ...
    def spatial_aggregate_name(self, agg_name): ...
    def geometry_columns(self): ...
    def spatial_ref_sys(self): ...
    def parse_raster(self, value): ...
    def deconstruct_raster(self, value): ...
