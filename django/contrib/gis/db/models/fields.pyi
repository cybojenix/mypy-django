# Stubs for django.contrib.gis.db.models.fields (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.db.models.fields import Field
from django.utils.translation import ugettext_lazy as _

def get_srid_info(srid, connection): ...

class GeoSelectFormatMixin:
    def select_format(self, compiler, sql, params): ...

class BaseSpatialField(Field):
    description = ...  # type: Any
    geodetic_units = ...  # type: Any
    spatial_index = ...  # type: Any
    srid = ...  # type: Any
    def __init__(self, verbose_name: Optional[Any] = ..., srid: int = ..., spatial_index: bool = ..., **kwargs) -> None: ...
    def deconstruct(self): ...
    def db_type(self, connection): ...
    def spheroid(self, connection): ...
    def units(self, connection): ...
    def units_name(self, connection): ...
    def geodetic(self, connection): ...
    def get_placeholder(self, value, compiler, connection): ...

class GeometryField(GeoSelectFormatMixin, BaseSpatialField):
    description = ...  # type: Any
    form_class = ...  # type: Any
    geom_type = ...  # type: str
    dim = ...  # type: Any
    geography = ...  # type: Any
    def __init__(self, verbose_name: Optional[Any] = ..., dim: int = ..., geography: bool = ..., **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_distance(self, value, lookup_type, connection): ...
    def get_prep_value(self, value): ...
    def from_db_value(self, value, expression, connection, context): ...
    def get_srid(self, geom): ...
    def contribute_to_class(self, cls, name, **kwargs): ...
    def formfield(self, **kwargs): ...
    def get_db_prep_lookup(self, lookup_type, value, connection, prepared: bool = ...): ...
    def get_prep_lookup(self, lookup_type, value): ...
    def get_db_prep_save(self, value, connection): ...

class PointField(GeometryField):
    geom_type = ...  # type: str
    form_class = ...  # type: Any
    description = ...  # type: Any

class LineStringField(GeometryField):
    geom_type = ...  # type: str
    form_class = ...  # type: Any
    description = ...  # type: Any

class PolygonField(GeometryField):
    geom_type = ...  # type: str
    form_class = ...  # type: Any
    description = ...  # type: Any

class MultiPointField(GeometryField):
    geom_type = ...  # type: str
    form_class = ...  # type: Any
    description = ...  # type: Any

class MultiLineStringField(GeometryField):
    geom_type = ...  # type: str
    form_class = ...  # type: Any
    description = ...  # type: Any

class MultiPolygonField(GeometryField):
    geom_type = ...  # type: str
    form_class = ...  # type: Any
    description = ...  # type: Any

class GeometryCollectionField(GeometryField):
    geom_type = ...  # type: str
    form_class = ...  # type: Any
    description = ...  # type: Any

class ExtentField(GeoSelectFormatMixin, Field):
    description = ...  # type: Any
    def get_internal_type(self): ...

class RasterField(BaseSpatialField):
    description = ...  # type: Any
    geom_type = ...  # type: str
    def __init__(self, *args, **kwargs) -> None: ...
    def db_type(self, connection): ...
    def from_db_value(self, value, expression, connection, context): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def contribute_to_class(self, cls, name, **kwargs): ...
