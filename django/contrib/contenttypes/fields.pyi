# Stubs for django.contrib.contenttypes.fields (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.db.models.fields.related import ForeignObject, ForeignObjectRel, ReverseManyToOneDescriptor

class GenericForeignKey:
    auto_created = ...  # type: bool
    concrete = ...  # type: bool
    editable = ...  # type: bool
    hidden = ...  # type: bool
    is_relation = ...  # type: bool
    many_to_many = ...  # type: bool
    many_to_one = ...  # type: bool
    one_to_many = ...  # type: bool
    one_to_one = ...  # type: bool
    related_model = ...  # type: Any
    remote_field = ...  # type: Any
    ct_field = ...  # type: Any
    fk_field = ...  # type: Any
    for_concrete_model = ...  # type: Any
    rel = ...  # type: Any
    column = ...  # type: Any
    def __init__(self, ct_field: str = ..., fk_field: str = ..., for_concrete_model: bool = ...) -> None: ...
    name = ...  # type: Any
    model = ...  # type: Any
    cache_attr = ...  # type: Any
    def contribute_to_class(self, cls, name, **kwargs): ...
    def get_filter_kwargs_for_object(self, obj): ...
    def get_forward_related_filter(self, obj): ...
    def check(self, **kwargs): ...
    def instance_pre_init(self, signal, sender, args, kwargs, **_kwargs): ...
    def get_content_type(self, obj: Optional[Any] = ..., id: Optional[Any] = ..., using: Optional[Any] = ...): ...
    def get_prefetch_queryset(self, instances, queryset: Optional[Any] = ...): ...
    def is_cached(self, instance): ...
    def __get__(self, instance, instance_type: Optional[Any] = ...): ...
    def __set__(self, instance, value): ...

class GenericRel(ForeignObjectRel):
    def __init__(self, field, to, related_name: Optional[Any] = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ...) -> None: ...

class GenericRelation(ForeignObject):
    auto_created = ...  # type: bool
    many_to_many = ...  # type: bool
    many_to_one = ...  # type: bool
    one_to_many = ...  # type: bool
    one_to_one = ...  # type: bool
    rel_class = ...  # type: Any
    object_id_field_name = ...  # type: Any
    content_type_field_name = ...  # type: Any
    for_concrete_model = ...  # type: Any
    def __init__(self, to, object_id_field: str = ..., content_type_field: str = ..., for_concrete_model: bool = ..., related_query_name: Optional[Any] = ..., limit_choices_to: Optional[Any] = ..., **kwargs) -> None: ...
    def check(self, **kwargs): ...
    to_fields = ...  # type: Any
    def resolve_related_fields(self): ...
    def get_path_info(self): ...
    def get_reverse_path_info(self): ...
    def get_choices_default(self): ...
    def value_to_string(self, obj): ...
    model = ...  # type: Any
    def contribute_to_class(self, cls, name, **kwargs): ...
    def set_attributes_from_rel(self): ...
    def get_internal_type(self): ...
    def get_content_type(self): ...
    def get_extra_restriction(self, where_class, alias, remote_alias): ...
    def bulk_related_objects(self, objs, using: Any = ...): ...

class ReverseGenericManyToOneDescriptor(ReverseManyToOneDescriptor):
    def related_manager_cls(self): ...

def create_generic_related_manager(superclass, rel): ...
