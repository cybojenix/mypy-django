# Stubs for django.contrib.auth.forms (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
import forms
from django.utils.translation import ugettext_lazy as _

class ReadOnlyPasswordHashWidget(forms.Widget):
    def render(self, name, value, attrs): ...

class ReadOnlyPasswordHashField(forms.Field):
    widget = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def bound_data(self, data, initial): ...
    def has_changed(self, initial, data): ...

class UserCreationForm(forms.ModelForm):
    error_messages = ...  # type: Any
    password1 = ...  # type: Any
    password2 = ...  # type: Any
    class Meta:
        model = ...  # type: Any
        fields = ...  # type: Any
    def clean_password2(self): ...
    def save(self, commit: bool = ...): ...

class UserChangeForm(forms.ModelForm):
    password = ...  # type: Any
    class Meta:
        model = ...  # type: Any
        fields = ...  # type: str
    def __init__(self, *args, **kwargs) -> None: ...
    def clean_password(self): ...

class AuthenticationForm(forms.Form):
    username = ...  # type: Any
    password = ...  # type: Any
    error_messages = ...  # type: Any
    request = ...  # type: Any
    user_cache = ...  # type: Any
    username_field = ...  # type: Any
    def __init__(self, request: Optional[Any] = ..., *args, **kwargs) -> None: ...
    def clean(self): ...
    def confirm_login_allowed(self, user): ...
    def get_user_id(self): ...
    def get_user(self): ...

class PasswordResetForm(forms.Form):
    email = ...  # type: Any
    def send_mail(self, subject_template_name, email_template_name, context, from_email, to_email, html_email_template_name: Optional[Any] = ...): ...
    def get_users(self, email): ...
    def save(self, domain_override: Optional[Any] = ..., subject_template_name: str = ..., email_template_name: str = ..., use_https: bool = ..., token_generator: Any = ..., from_email: Optional[Any] = ..., request: Optional[Any] = ..., html_email_template_name: Optional[Any] = ..., extra_email_context: Optional[Any] = ...): ...

class SetPasswordForm(forms.Form):
    error_messages = ...  # type: Any
    new_password1 = ...  # type: Any
    new_password2 = ...  # type: Any
    user = ...  # type: Any
    def __init__(self, user, *args, **kwargs) -> None: ...
    def clean_new_password2(self): ...
    def save(self, commit: bool = ...): ...

class PasswordChangeForm(SetPasswordForm):
    error_messages = ...  # type: Any
    old_password = ...  # type: Any
    field_order = ...  # type: Any
    def clean_old_password(self): ...

class AdminPasswordChangeForm(forms.Form):
    error_messages = ...  # type: Any
    required_css_class = ...  # type: str
    password1 = ...  # type: Any
    password2 = ...  # type: Any
    user = ...  # type: Any
    def __init__(self, user, *args, **kwargs) -> None: ...
    def clean_password2(self): ...
    def save(self, commit: bool = ...): ...
    changed_data = ...  # type: Any
