# Stubs for django.contrib.auth.models (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
import models
from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
from django.utils.translation import ugettext_lazy as _
import AbstractUser

def update_last_login(sender, user, **kwargs): ...

class PermissionManager(models.Manager):
    use_in_migrations = ...  # type: bool
    def get_by_natural_key(self, codename, app_label, model): ...

class Permission(models.Model):
    name = ...  # type: Any
    content_type = ...  # type: Any
    codename = ...  # type: Any
    objects = ...  # type: Any
    class Meta:
        verbose_name = ...  # type: Any
        verbose_name_plural = ...  # type: Any
        unique_together = ...  # type: Any
        ordering = ...  # type: Any
    def natural_key(self): ...

class GroupManager(models.Manager):
    use_in_migrations = ...  # type: bool
    def get_by_natural_key(self, name): ...

class Group(models.Model):
    name = ...  # type: Any
    permissions = ...  # type: Any
    objects = ...  # type: Any
    class Meta:
        verbose_name = ...  # type: Any
        verbose_name_plural = ...  # type: Any
    def natural_key(self): ...

class UserManager(BaseUserManager):
    use_in_migrations = ...  # type: bool
    def create_user(self, username, email: Optional[Any] = ..., password: Optional[Any] = ..., **extra_fields): ...
    def create_superuser(self, username, email, password, **extra_fields): ...

class PermissionsMixin(models.Model):
    is_superuser = ...  # type: Any
    groups = ...  # type: Any
    user_permissions = ...  # type: Any
    class Meta:
        abstract = ...  # type: bool
    def get_group_permissions(self, obj: Optional[Any] = ...): ...
    def get_all_permissions(self, obj: Optional[Any] = ...): ...
    def has_perm(self, perm, obj: Optional[Any] = ...): ...
    def has_perms(self, perm_list, obj: Optional[Any] = ...): ...
    def has_module_perms(self, app_label): ...

class AbstractUser(AbstractBaseUser, PermissionsMixin):
    username = ...  # type: Any
    first_name = ...  # type: Any
    last_name = ...  # type: Any
    email = ...  # type: Any
    is_staff = ...  # type: Any
    is_active = ...  # type: Any
    date_joined = ...  # type: Any
    objects = ...  # type: Any
    USERNAME_FIELD = ...  # type: str
    REQUIRED_FIELDS = ...  # type: Any
    class Meta:
        verbose_name = ...  # type: Any
        verbose_name_plural = ...  # type: Any
        abstract = ...  # type: bool
    def get_full_name(self): ...
    def get_short_name(self): ...
    def email_user(self, subject, message, from_email: Optional[Any] = ..., **kwargs): ...

class User(AbstractUser):
    class Meta(AbstractUser.Meta):
        swappable = ...  # type: str

class AnonymousUser:
    id = ...  # type: Any
    pk = ...  # type: Any
    username = ...  # type: str
    is_staff = ...  # type: bool
    is_active = ...  # type: bool
    is_superuser = ...  # type: bool
    def __init__(self) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def save(self): ...
    def delete(self): ...
    def set_password(self, raw_password): ...
    def check_password(self, raw_password): ...
    groups = ...  # type: Any
    user_permissions = ...  # type: Any
    def get_group_permissions(self, obj: Optional[Any] = ...): ...
    def get_all_permissions(self, obj: Optional[Any] = ...): ...
    def has_perm(self, perm, obj: Optional[Any] = ...): ...
    def has_perms(self, perm_list, obj: Optional[Any] = ...): ...
    def has_module_perms(self, module): ...
    def is_anonymous(self): ...
    def is_authenticated(self): ...
    def get_username(self): ...
