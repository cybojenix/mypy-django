# Stubs for django.contrib.postgres.fields.ranges (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
import models
import lookups

class RangeField(models.Field):
    empty_strings_allowed = ...  # type: bool
    def get_prep_value(self, value): ...
    def to_python(self, value): ...
    def set_attributes_from_name(self, name): ...
    def value_to_string(self, obj): ...
    def formfield(self, **kwargs): ...

class IntegerRangeField(RangeField):
    base_field = ...  # type: Any
    range_type = ...  # type: Any
    form_field = ...  # type: Any
    def db_type(self, connection): ...

class BigIntegerRangeField(RangeField):
    base_field = ...  # type: Any
    range_type = ...  # type: Any
    form_field = ...  # type: Any
    def db_type(self, connection): ...

class FloatRangeField(RangeField):
    base_field = ...  # type: Any
    range_type = ...  # type: Any
    form_field = ...  # type: Any
    def db_type(self, connection): ...

class DateTimeRangeField(RangeField):
    base_field = ...  # type: Any
    range_type = ...  # type: Any
    form_field = ...  # type: Any
    def db_type(self, connection): ...

class DateRangeField(RangeField):
    base_field = ...  # type: Any
    range_type = ...  # type: Any
    form_field = ...  # type: Any
    def db_type(self, connection): ...

class RangeContainedBy(models.Lookup):
    lookup_name = ...  # type: str
    type_mapping = ...  # type: Any
    def as_sql(self, qn, connection): ...
    def get_prep_lookup(self): ...

class FullyLessThan(lookups.PostgresSimpleLookup):
    lookup_name = ...  # type: str
    operator = ...  # type: str

class FullGreaterThan(lookups.PostgresSimpleLookup):
    lookup_name = ...  # type: str
    operator = ...  # type: str

class NotLessThan(lookups.PostgresSimpleLookup):
    lookup_name = ...  # type: str
    operator = ...  # type: str

class NotGreaterThan(lookups.PostgresSimpleLookup):
    lookup_name = ...  # type: str
    operator = ...  # type: str

class AdjacentToLookup(lookups.PostgresSimpleLookup):
    lookup_name = ...  # type: str
    operator = ...  # type: str

class RangeStartsWith(models.Transform):
    lookup_name = ...  # type: str
    function = ...  # type: str
    @property
    def output_field(self): ...

class RangeEndsWith(models.Transform):
    lookup_name = ...  # type: str
    function = ...  # type: str
    @property
    def output_field(self): ...

class IsEmpty(models.Transform):
    lookup_name = ...  # type: str
    function = ...  # type: str
    output_field = ...  # type: Any
