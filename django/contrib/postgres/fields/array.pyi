# Stubs for django.contrib.postgres.fields.array (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
import lookups
from django.db.models import Field, Transform
from django.db.models.lookups import Exact
from django.utils.translation import ugettext_lazy as _

class ArrayField(Field):
    empty_strings_allowed = ...  # type: bool
    default_error_messages = ...  # type: Any
    base_field = ...  # type: Any
    size = ...  # type: Any
    default_validators = ...  # type: Any
    def __init__(self, base_field, size: Optional[Any] = ..., **kwargs) -> None: ...
    @property
    def model(self): ...
    @model.setter
    def model(self, model): ...
    def check(self, **kwargs): ...
    def set_attributes_from_name(self, name): ...
    @property
    def description(self): ...
    def db_type(self, connection): ...
    def get_db_prep_value(self, value, connection, prepared: bool = ...): ...
    def deconstruct(self): ...
    def to_python(self, value): ...
    def value_to_string(self, obj): ...
    def get_transform(self, name): ...
    def validate(self, value, model_instance): ...
    def run_validators(self, value): ...
    def formfield(self, **kwargs): ...

class ArrayContains(lookups.DataContains):
    def as_sql(self, qn, connection): ...

class ArrayContainedBy(lookups.ContainedBy):
    def as_sql(self, qn, connection): ...

class ArrayExact(Exact):
    def as_sql(self, qn, connection): ...

class ArrayOverlap(lookups.Overlap):
    def as_sql(self, qn, connection): ...

class ArrayLenTransform(Transform):
    lookup_name = ...  # type: str
    output_field = ...  # type: Any
    def as_sql(self, compiler, connection): ...

class IndexTransform(Transform):
    index = ...  # type: Any
    base_field = ...  # type: Any
    def __init__(self, index, base_field, *args, **kwargs) -> None: ...
    def as_sql(self, compiler, connection): ...
    @property
    def output_field(self): ...

class IndexTransformFactory:
    index = ...  # type: Any
    base_field = ...  # type: Any
    def __init__(self, index, base_field) -> None: ...
    def __call__(self, *args, **kwargs): ...

class SliceTransform(Transform):
    start = ...  # type: Any
    end = ...  # type: Any
    def __init__(self, start, end, *args, **kwargs) -> None: ...
    def as_sql(self, compiler, connection): ...

class SliceTransformFactory:
    start = ...  # type: Any
    end = ...  # type: Any
    def __init__(self, start, end) -> None: ...
    def __call__(self, *args, **kwargs): ...
