# Stubs for django.db.backends.postgresql.operations (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.db.backends.base.operations import BaseDatabaseOperations

class DatabaseOperations(BaseDatabaseOperations):
    def unification_cast_sql(self, output_field): ...
    def date_extract_sql(self, lookup_type, field_name): ...
    def date_trunc_sql(self, lookup_type, field_name): ...
    def datetime_cast_date_sql(self, field_name, tzname): ...
    def datetime_extract_sql(self, lookup_type, field_name, tzname): ...
    def datetime_trunc_sql(self, lookup_type, field_name, tzname): ...
    def deferrable_sql(self): ...
    def lookup_cast(self, lookup_type, internal_type: Optional[Any] = ...): ...
    def last_insert_id(self, cursor, table_name, pk_name): ...
    def no_limit_value(self): ...
    def prepare_sql_script(self, sql): ...
    def quote_name(self, name): ...
    def set_time_zone_sql(self): ...
    def sql_flush(self, style, tables, sequences, allow_cascade: bool = ...): ...
    def sequence_reset_by_name_sql(self, style, sequences): ...
    def tablespace_sql(self, tablespace, inline: bool = ...): ...
    def sequence_reset_sql(self, style, model_list): ...
    def prep_for_iexact_query(self, x): ...
    def max_name_length(self): ...
    def distinct_sql(self, fields): ...
    def last_executed_query(self, cursor, sql, params): ...
    def return_insert_id(self): ...
    def bulk_insert_sql(self, fields, placeholder_rows): ...
    def adapt_datefield_value(self, value): ...
    def adapt_datetimefield_value(self, value): ...
    def adapt_timefield_value(self, value): ...
    def adapt_ipaddressfield_value(self, value): ...
