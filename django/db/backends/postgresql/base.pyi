# Stubs for django.db.backends.postgresql.base (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.db.backends.base.base import BaseDatabaseWrapper
from django.db.utils import DatabaseError as WrappedDatabaseError
from .client import DatabaseClient as DatabaseClient
from .creation import DatabaseCreation as DatabaseCreation
from .features import DatabaseFeatures as DatabaseFeatures
from .introspection import DatabaseIntrospection as DatabaseIntrospection
from .operations import DatabaseOperations as DatabaseOperations
from .schema import DatabaseSchemaEditor as DatabaseSchemaEditor
from .utils import utc_tzinfo_factory as utc_tzinfo_factory
from .version import get_version as get_version

def psycopg2_version(): ...

PSYCOPG2_VERSION = ...  # type: Any
DatabaseError = ...  # type: Any
IntegrityError = ...  # type: Any
INETARRAY_OID = ...  # type: int
INETARRAY = ...  # type: Any

class DatabaseWrapper(BaseDatabaseWrapper):
    vendor = ...  # type: str
    data_types = ...  # type: Any
    data_type_check_constraints = ...  # type: Any
    operators = ...  # type: Any
    pattern_esc = ...  # type: str
    pattern_ops = ...  # type: Any
    Database = ...  # type: Any
    SchemaEditorClass = ...  # type: Any
    features = ...  # type: Any
    ops = ...  # type: Any
    client = ...  # type: Any
    creation = ...  # type: Any
    introspection = ...  # type: Any
    validation = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def get_connection_params(self): ...
    isolation_level = ...  # type: Any
    def get_new_connection(self, conn_params): ...
    def init_connection_state(self): ...
    def create_cursor(self): ...
    def check_constraints(self, table_names: Optional[Any] = ...): ...
    def is_usable(self): ...
    def psycopg2_version(self): ...
    def pg_version(self): ...
