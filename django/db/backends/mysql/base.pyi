# Stubs for django.db.backends.mysql.base (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from django.db.backends import utils as backend_utils
from django.db.backends.base.base import BaseDatabaseWrapper
from .client import DatabaseClient as DatabaseClient
from .creation import DatabaseCreation as DatabaseCreation
from .features import DatabaseFeatures as DatabaseFeatures
from .introspection import DatabaseIntrospection as DatabaseIntrospection
from .operations import DatabaseOperations as DatabaseOperations
from .schema import DatabaseSchemaEditor as DatabaseSchemaEditor
from .validation import DatabaseValidation as DatabaseValidation

version = ...  # type: Any
DatabaseError = ...  # type: Any
IntegrityError = ...  # type: Any

def adapt_datetime_warn_on_aware_datetime(value, conv): ...

django_conversions = ...  # type: Any
server_version_re = ...  # type: Any

class CursorWrapper:
    codes_for_integrityerror = ...  # type: Any
    cursor = ...  # type: Any
    def __init__(self, cursor) -> None: ...
    def execute(self, query, args: Optional[Any] = ...): ...
    def executemany(self, query, args): ...
    def __getattr__(self, attr): ...
    def __iter__(self): ...
    def __enter__(self): ...
    def __exit__(self, type, value, traceback): ...

class DatabaseWrapper(BaseDatabaseWrapper):
    vendor = ...  # type: str
    def data_types(self): ...
    operators = ...  # type: Any
    pattern_esc = ...  # type: str
    pattern_ops = ...  # type: Any
    Database = ...  # type: Any
    SchemaEditorClass = ...  # type: Any
    features = ...  # type: Any
    ops = ...  # type: Any
    client = ...  # type: Any
    creation = ...  # type: Any
    introspection = ...  # type: Any
    validation = ...  # type: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def get_connection_params(self): ...
    def get_new_connection(self, conn_params): ...
    def init_connection_state(self): ...
    def create_cursor(self): ...
    def disable_constraint_checking(self): ...
    needs_rollback = ...  # type: Any
    def enable_constraint_checking(self): ...
    def check_constraints(self, table_names: Optional[Any] = ...): ...
    def is_usable(self): ...
    def mysql_version(self): ...
